# ansible-playbook-jenkins.yml - Install Jenkins with Docker
- name: Install Jenkins on EC2 instance using Docker
  hosts: jenkins_server
  become: yes
  tasks:
    - name: Gather OS information
      debug:
        msg: 
          - "Distribution: {{ ansible_distribution }}"
          - "Version: {{ ansible_distribution_version }}"
          - "OS Family: {{ ansible_os_family }}"
    
    - name: Update system packages
      shell: |
        if command -v apt-get &> /dev/null; then
          apt-get update -y
        elif command -v dnf &> /dev/null; then
          dnf update -y
        elif command -v yum &> /dev/null; then
          yum update -y
        else
          echo "No supported package manager found"
          exit 1
        fi
      args:
        executable: /bin/bash
    
    - name: Install Java 17 for Amazon Linux 2023
      dnf:
        name: java-17-amazon-corretto
        state: present
      when: ansible_distribution == "Amazon" and ansible_distribution_version == "2023"

    - name: Install Java 17 for Amazon Linux 2
      shell: |
        amazon-linux-extras install java-openjdk17 -y
        yum install -y java-17-amazon-corretto-devel
      args:
        executable: /bin/bash
      when: ansible_distribution == "Amazon" and ansible_distribution_version == "2"

    - name: Install necessary packages for Amazon Linux
      package:
        name: 
          - git
          - python3
          - python3-pip
          - unzip
        state: present
      when: ansible_distribution == "Amazon"

    # Install Docker on Amazon Linux 2023
    - name: Install Docker for Amazon Linux 2023
      dnf:
        name: docker
        state: present
      when: ansible_distribution == "Amazon" and ansible_distribution_version == "2023"

    # Install Docker on Amazon Linux 2
    - name: Install Docker for Amazon Linux 2
      shell: |
        amazon-linux-extras install docker -y
      args:
        executable: /bin/bash
      when: ansible_distribution == "Amazon" and ansible_distribution_version == "2"

    # Start and enable Docker service
    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    # Create directories for Jenkins data
    - name: Create Jenkins home directory
      file:
        path: /opt/jenkins_home
        state: directory
        mode: '0755'

    # Check if Jenkins container already exists
    - name: Check if Jenkins container exists
      shell: docker ps -a --filter "name=jenkins" --format {% raw %}"{{.Names}}"{% endraw %}
      register: jenkins_container
      changed_when: false

    # Stop and remove existing Jenkins container if it exists
    - name: Stop and remove existing Jenkins container
      shell: docker stop jenkins && docker rm jenkins
      when: jenkins_container.stdout == "jenkins"
      ignore_errors: yes

    # Pull the latest Jenkins LTS image
    - name: Pull the latest Jenkins LTS image
      shell: docker pull jenkins/jenkins:lts-jdk17
      args:
        executable: /bin/bash

    # Run Jenkins container
    - name: Recheck if Jenkins container exists after removal
      shell: docker ps -a --filter "name=jenkins" --format {% raw %}"{{.Names}}"{% endraw %}
      register: jenkins_container_after
      changed_when: false

    - name: Run Jenkins container
      shell: >
        docker run -d --name jenkins 
        -p 8080:8080 -p 50000:50000
        -v /opt/jenkins_home:/var/jenkins_home
        -v /var/run/docker.sock:/var/run/docker.sock
        --restart always
        -e JAVA_OPTS="-Djenkins.install.runSetupWizard=true"
        jenkins/jenkins:lts-jdk17
      args:
        executable: /bin/bash
      when: jenkins_container_after.stdout == ""

    # Wait for Jenkins to start
    - name: Wait for Jenkins to start up
      pause:
        seconds: 30

    # Check Docker container status
    - name: Check Docker container status
      shell: docker ps -a --filter "name=jenkins" --format {% raw %}"{{.Status}}"{% endraw %}
      register: container_status
      changed_when: false

    # Get the Jenkins initial admin password
    - name: Get Jenkins initial admin password
      shell: docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword || echo "Jenkins may not be running properly yet"
      register: jenkins_admin_password
      changed_when: false
      failed_when: false

    - name: Display Jenkins initial admin password
      debug:
        var: jenkins_admin_password.stdout

    # Install AWS CLI
    - name: Install AWS CLI
      shell: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -o awscliv2.zip
        ./aws/install --update
      args:
        executable: /bin/bash
        creates: /usr/local/bin/aws
      failed_when: false

    # Install Ansible
    - name: Install Ansible
      shell: pip3 install ansible
      args:
        executable: /bin/bash
      failed_when: false

    # Display Jenkins URL
    - name: Display Jenkins URL
      debug:
        msg: "Jenkins is running at http://{{ ansible_host }}:8080"